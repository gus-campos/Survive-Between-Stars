//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/RocketInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RocketInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RocketInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RocketInputActions"",
    ""maps"": [
        {
            ""name"": ""Rocket"",
            ""id"": ""2d7b3f96-5a5c-421f-83fa-acf533ff0155"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""e1612e94-f4e5-40cc-8fc3-f6afde3223ec"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""b95d561e-d829-4651-9e13-6ed191d2a7b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Accel"",
                    ""type"": ""Button"",
                    ""id"": ""9bce56e5-cad5-44ba-9d71-ebb0c5f08e1a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""e754d705-0074-43d5-bfaa-5469fa0810d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ModeSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""ecfb70c7-0ebf-468a-8d2c-d69a910287c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""38e6f319-b064-4f6a-a69d-21420fb2ec2f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a757815-ee92-4a34-b8e1-5aee79e6c38a"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f65a75f2-cd2d-408b-967b-f493afaa0459"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dee8f48a-0e26-41d1-b730-e1b4db3ac460"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93a105d4-ca7e-477e-9e65-88eba1585bc7"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""122b6d5b-8e1c-46f8-ad39-a2e67f20fa87"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7813ac32-6ef0-4a17-8ed1-17a17bce6f6b"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0531844d-932b-4e3a-af30-eb2053998673"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ModeSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Rocket
        m_Rocket = asset.FindActionMap("Rocket", throwIfNotFound: true);
        m_Rocket_Look = m_Rocket.FindAction("Look", throwIfNotFound: true);
        m_Rocket_Shoot = m_Rocket.FindAction("Shoot", throwIfNotFound: true);
        m_Rocket_Accel = m_Rocket.FindAction("Accel", throwIfNotFound: true);
        m_Rocket_Dash = m_Rocket.FindAction("Dash", throwIfNotFound: true);
        m_Rocket_ModeSwitch = m_Rocket.FindAction("ModeSwitch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Rocket
    private readonly InputActionMap m_Rocket;
    private List<IRocketActions> m_RocketActionsCallbackInterfaces = new List<IRocketActions>();
    private readonly InputAction m_Rocket_Look;
    private readonly InputAction m_Rocket_Shoot;
    private readonly InputAction m_Rocket_Accel;
    private readonly InputAction m_Rocket_Dash;
    private readonly InputAction m_Rocket_ModeSwitch;
    public struct RocketActions
    {
        private @RocketInputActions m_Wrapper;
        public RocketActions(@RocketInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Rocket_Look;
        public InputAction @Shoot => m_Wrapper.m_Rocket_Shoot;
        public InputAction @Accel => m_Wrapper.m_Rocket_Accel;
        public InputAction @Dash => m_Wrapper.m_Rocket_Dash;
        public InputAction @ModeSwitch => m_Wrapper.m_Rocket_ModeSwitch;
        public InputActionMap Get() { return m_Wrapper.m_Rocket; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RocketActions set) { return set.Get(); }
        public void AddCallbacks(IRocketActions instance)
        {
            if (instance == null || m_Wrapper.m_RocketActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RocketActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Accel.started += instance.OnAccel;
            @Accel.performed += instance.OnAccel;
            @Accel.canceled += instance.OnAccel;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @ModeSwitch.started += instance.OnModeSwitch;
            @ModeSwitch.performed += instance.OnModeSwitch;
            @ModeSwitch.canceled += instance.OnModeSwitch;
        }

        private void UnregisterCallbacks(IRocketActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Accel.started -= instance.OnAccel;
            @Accel.performed -= instance.OnAccel;
            @Accel.canceled -= instance.OnAccel;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @ModeSwitch.started -= instance.OnModeSwitch;
            @ModeSwitch.performed -= instance.OnModeSwitch;
            @ModeSwitch.canceled -= instance.OnModeSwitch;
        }

        public void RemoveCallbacks(IRocketActions instance)
        {
            if (m_Wrapper.m_RocketActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRocketActions instance)
        {
            foreach (var item in m_Wrapper.m_RocketActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RocketActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RocketActions @Rocket => new RocketActions(this);
    public interface IRocketActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnAccel(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnModeSwitch(InputAction.CallbackContext context);
    }
}
