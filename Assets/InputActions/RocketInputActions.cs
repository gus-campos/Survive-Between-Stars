//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""spaceship"",
            ""id"": ""2d7b3f96-5a5c-421f-83fa-acf533ff0155"",
            ""actions"": [
                {
                    ""name"": ""LookMouse"",
                    ""type"": ""Value"",
                    ""id"": ""e3127417-4ef0-4ddb-a632-7bd977132b30"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""b95d561e-d829-4651-9e13-6ed191d2a7b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Accel"",
                    ""type"": ""Button"",
                    ""id"": ""9bce56e5-cad5-44ba-9d71-ebb0c5f08e1a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""e754d705-0074-43d5-bfaa-5469fa0810d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""38e6f319-b064-4f6a-a69d-21420fb2ec2f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f65a75f2-cd2d-408b-967b-f493afaa0459"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c25ba929-59ba-4f77-b261-ca935249a342"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""122b6d5b-8e1c-46f8-ad39-a2e67f20fa87"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efbd5329-2b4a-4663-8542-fd64aa5f6b6d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""System"",
            ""id"": ""f3b7eb0b-0d98-4994-ac30-552b5b928165"",
            ""actions"": [
                {
                    ""name"": ""RestartGame"",
                    ""type"": ""Button"",
                    ""id"": ""cab0aec5-b82a-42f4-9ae9-3d23e8542ff3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Resume"",
                    ""type"": ""Button"",
                    ""id"": ""b87bce94-56b0-4a27-bf5a-953348928275"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""a811c978-96b1-484d-8747-972f72c6c49f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GameOverRestart"",
                    ""type"": ""Button"",
                    ""id"": ""f06c694b-cb71-4364-b2b4-ed6442b108eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""73d5631a-e3d5-4459-894b-55314df00978"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RestartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40d54d44-f809-4bc2-a538-1b378969f4e2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Resume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""660b3675-15f8-4f1b-b145-88e1401873b2"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e8c1304-cb66-44bf-bfad-f0327f6e9011"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GameOverRestart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // spaceship
        m_spaceship = asset.FindActionMap("spaceship", throwIfNotFound: true);
        m_spaceship_LookMouse = m_spaceship.FindAction("LookMouse", throwIfNotFound: true);
        m_spaceship_Shoot = m_spaceship.FindAction("Shoot", throwIfNotFound: true);
        m_spaceship_Accel = m_spaceship.FindAction("Accel", throwIfNotFound: true);
        m_spaceship_Dash = m_spaceship.FindAction("Dash", throwIfNotFound: true);
        // System
        m_System = asset.FindActionMap("System", throwIfNotFound: true);
        m_System_RestartGame = m_System.FindAction("RestartGame", throwIfNotFound: true);
        m_System_Resume = m_System.FindAction("Resume", throwIfNotFound: true);
        m_System_Pause = m_System.FindAction("Pause", throwIfNotFound: true);
        m_System_GameOverRestart = m_System.FindAction("GameOverRestart", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // spaceship
    private readonly InputActionMap m_spaceship;
    private List<ISpaceshipActions> m_SpaceshipActionsCallbackInterfaces = new List<ISpaceshipActions>();
    private readonly InputAction m_spaceship_LookMouse;
    private readonly InputAction m_spaceship_Shoot;
    private readonly InputAction m_spaceship_Accel;
    private readonly InputAction m_spaceship_Dash;
    public struct SpaceshipActions
    {
        private @PlayerInputActions m_Wrapper;
        public SpaceshipActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LookMouse => m_Wrapper.m_spaceship_LookMouse;
        public InputAction @Shoot => m_Wrapper.m_spaceship_Shoot;
        public InputAction @Accel => m_Wrapper.m_spaceship_Accel;
        public InputAction @Dash => m_Wrapper.m_spaceship_Dash;
        public InputActionMap Get() { return m_Wrapper.m_spaceship; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpaceshipActions set) { return set.Get(); }
        public void AddCallbacks(ISpaceshipActions instance)
        {
            if (instance == null || m_Wrapper.m_SpaceshipActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpaceshipActionsCallbackInterfaces.Add(instance);
            @LookMouse.started += instance.OnLookMouse;
            @LookMouse.performed += instance.OnLookMouse;
            @LookMouse.canceled += instance.OnLookMouse;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Accel.started += instance.OnAccel;
            @Accel.performed += instance.OnAccel;
            @Accel.canceled += instance.OnAccel;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(ISpaceshipActions instance)
        {
            @LookMouse.started -= instance.OnLookMouse;
            @LookMouse.performed -= instance.OnLookMouse;
            @LookMouse.canceled -= instance.OnLookMouse;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Accel.started -= instance.OnAccel;
            @Accel.performed -= instance.OnAccel;
            @Accel.canceled -= instance.OnAccel;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(ISpaceshipActions instance)
        {
            if (m_Wrapper.m_SpaceshipActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpaceshipActions instance)
        {
            foreach (var item in m_Wrapper.m_SpaceshipActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpaceshipActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpaceshipActions @spaceship => new SpaceshipActions(this);

    // System
    private readonly InputActionMap m_System;
    private List<ISystemActions> m_SystemActionsCallbackInterfaces = new List<ISystemActions>();
    private readonly InputAction m_System_RestartGame;
    private readonly InputAction m_System_Resume;
    private readonly InputAction m_System_Pause;
    private readonly InputAction m_System_GameOverRestart;
    public struct SystemActions
    {
        private @PlayerInputActions m_Wrapper;
        public SystemActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RestartGame => m_Wrapper.m_System_RestartGame;
        public InputAction @Resume => m_Wrapper.m_System_Resume;
        public InputAction @Pause => m_Wrapper.m_System_Pause;
        public InputAction @GameOverRestart => m_Wrapper.m_System_GameOverRestart;
        public InputActionMap Get() { return m_Wrapper.m_System; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SystemActions set) { return set.Get(); }
        public void AddCallbacks(ISystemActions instance)
        {
            if (instance == null || m_Wrapper.m_SystemActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SystemActionsCallbackInterfaces.Add(instance);
            @RestartGame.started += instance.OnRestartGame;
            @RestartGame.performed += instance.OnRestartGame;
            @RestartGame.canceled += instance.OnRestartGame;
            @Resume.started += instance.OnResume;
            @Resume.performed += instance.OnResume;
            @Resume.canceled += instance.OnResume;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @GameOverRestart.started += instance.OnGameOverRestart;
            @GameOverRestart.performed += instance.OnGameOverRestart;
            @GameOverRestart.canceled += instance.OnGameOverRestart;
        }

        private void UnregisterCallbacks(ISystemActions instance)
        {
            @RestartGame.started -= instance.OnRestartGame;
            @RestartGame.performed -= instance.OnRestartGame;
            @RestartGame.canceled -= instance.OnRestartGame;
            @Resume.started -= instance.OnResume;
            @Resume.performed -= instance.OnResume;
            @Resume.canceled -= instance.OnResume;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @GameOverRestart.started -= instance.OnGameOverRestart;
            @GameOverRestart.performed -= instance.OnGameOverRestart;
            @GameOverRestart.canceled -= instance.OnGameOverRestart;
        }

        public void RemoveCallbacks(ISystemActions instance)
        {
            if (m_Wrapper.m_SystemActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISystemActions instance)
        {
            foreach (var item in m_Wrapper.m_SystemActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SystemActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SystemActions @System => new SystemActions(this);
    public interface ISpaceshipActions
    {
        void OnLookMouse(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnAccel(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface ISystemActions
    {
        void OnRestartGame(InputAction.CallbackContext context);
        void OnResume(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnGameOverRestart(InputAction.CallbackContext context);
    }
}
